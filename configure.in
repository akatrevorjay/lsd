#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
#
# Change the version number below after doing a public release.
# The version in git should reflect the *next* version planned.
# Version must be MAJOR.MINOR.PATCH otherwise things will break.
#
AC_INIT([libshuppan],[0.0.1],[victor@iso3103.net])

AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AM_CONFIG_HEADER(src/platform.h)
AM_INIT_AUTOMAKE(tar-ustar)

# This defines PACKAGE_VERSION_... in src/platform.h
PV_MAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PV_MINOR=`echo $PACKAGE_VERSION | cut -d . -f 2`
PV_PATCH=`echo $PACKAGE_VERSION | cut -d . -f 3`
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MAJOR],[$PV_MAJOR],
    [LIBSHUPPAN major version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MINOR],[$PV_MINOR],
    [LIBSHUPPAN minor version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_PATCH],[$PV_PATCH],
    [LIBSHUPPAN patchlevel])
# This lets us use PACKAGE_VERSION in Makefiles
AC_SUBST(PACKAGE_VERSION)

#
# Libtool -version-info (ABI version)
#
# Currently 0.0.1 ("prealpha"). Don't change this unless you
# know exactly what you're doing and have read and understand
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
#
# libshuppan -version-info
LTVER="0:1:0"
AC_SUBST(LTVER)

# Checks for programs.
AC_PROG_CC
AC_PROG_CC_C99
AM_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_AWK

AC_SUBST(LIBTOOL_DEPS)
AC_LTDL_DLLIB

CFLAGS="${CFLAGS}"

# Gives the ability to suppress the version number : useful for Android bundling
AC_ARG_ENABLE([version],
							[AS_HELP_STRING([--disable-version], [removes version info from the library [default=no]])],
							[],
							[enable_version=yes])
AM_CONDITIONAL(DISABLE_VERSION, test "x$enable_version" = "xno")

# Enables the bundling of czmq, uuid, zyre statically in the .so .
AC_ARG_ENABLE([embedded],
							[AS_HELP_STRING([--enable-embedded],[embeds zyre, crypto, fmq, uuid and czmq in the lib [default=no]])],
							[],
							[enable_embedded=no])

AC_ARG_ENABLE([python],
							[AS_HELP_STRING([--disable-python], [disables Python bindings [default=no]])],
							[],
							[enable_python=yes])

# libuuid 
AC_ARG_WITH([libuuid],
            [AS_HELP_STRING([--with-libuuid],
						[Specify libuuid prefix])],
            [shuppan_search_libuuid="yes"],
            [])
if test "x$shuppan_search_libuuid" = "xyes"; then
    if test -r "${with_libuuid}/include/uuid/uuid.h"; then
        CFLAGS="-I${with_libuuid}/include ${CFLAGS}"
        LDFLAGS="-L${with_libuuid}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libuuid}/include/uuid/uuid.h not found. Please check libuuid prefix])
    fi
fi

# libzmq 
AC_ARG_WITH([libzmq],
            [AS_HELP_STRING([--with-libzmq],
						[Specify libzmq prefix])],
            [shuppan_search_libzmq="yes"],
            [])
if test "x$shuppan_search_libzmq" = "xyes"; then
    if test -r "${with_libzmq}/include/zmq.h"; then
        CFLAGS="-I${with_libzmq}/include ${CFLAGS}"
        LDFLAGS="-L${with_libzmq}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libzmq}/include/zmq.h not found. Please check libzmq prefix])
    fi
fi

# libczmq
AC_ARG_WITH([libczmq],
            [AS_HELP_STRING([--with-libczmq],
                            [Specify libczmq prefix])],
            [shuppan_search_libczmq="yes"],
            [])
if test "x$shuppan_search_libczmq" = "xyes"; then
    if test -r "${with_libczmq}/include/czmq.h"; then
        CFLAGS="-I${with_libczmq}/include ${CFLAGS}"
        LDFLAGS="-L${with_libczmq}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libczmq}/include/czmq.h not found. Please check libczmq prefix])
    fi
fi

# libcrypto
AC_ARG_WITH([libcrypto],
            [AS_HELP_STRING([--with-libcrypto],
                            [Specify libcrypto prefix])],
            [shuppan_search_libcrypto="yes"],
            [])
if test "x$shuppan_search_libcrypto" = "xyes"; then
    if test -r "${with_libcrypto}/include/openssl/crypto.h"; then
        CFLAGS="-I${with_libcrypto}/include ${CFLAGS}"
        LDFLAGS="-L${with_libcrypto}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libcrypto}/include/openssl/crypto.h not found. Please check libcrypto prefix])
    fi
fi

# libfmq
AC_ARG_WITH([libfmq],
            [AS_HELP_STRING([--with-libfmq],
                            [Specify libfmq prefix])],
            [shuppan_search_libfmq="yes"],
            [])
if test "x$shuppan_search_libfmq" = "xyes"; then
    if test -r "${with_libfmq}/include/fmq.h"; then
        CFLAGS="-I${with_libfmq}/include ${CFLAGS}"
        LDFLAGS="-L${with_libfmq}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libfmq}/include/fmq.h not found. Please check libfmq prefix])
    fi
fi

# libzre
AC_ARG_WITH([libzre],
            [AS_HELP_STRING([--with-libzre],
                            [Specify libzre prefix])],
            [shuppan_search_libzre="yes"],
            [])
if test "x$shuppan_search_libzre" = "xyes"; then
    if test -r "${with_libzre}/include/zre/zre.h"; then
        CFLAGS="-I${with_libzre}/include ${CFLAGS}"
        LDFLAGS="-L${with_libzre}/lib ${LDFLAGS}"
    else
        AC_MSG_ERROR([${with_libzre}/include/zre/zre.h not found. Please check libzre prefix])
    fi
fi


# Host speciffic checks
AC_CANONICAL_HOST

# Determine whether or not documentation should be built and installed.


# Set some default features required by libzre code.
CFLAGS="-D_REENTRANT -D_THREAD_SAFE $CFLAGS"

# OS-specific tests
case "${host_os}" in
    *linux*)
        # Define on Linux to enable all library features
        CFLAGS="-D_GNU_SOURCE -DLINUX $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_LINUX, 1, [Have Linux OS])

				case "${host_os}" in
					*android*)
						AC_DEFINE(LIBSHUPPAN_HAVE_ANDROID, 1, [Have Android OS])
						libshuppan_host_android="yes"
						enable_python="no"
					;;
				esac

        ;;
    *solaris*)
        # Define on Solaris to enable all library features
        CFLAGS="-D_PTHREADS $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_SOLARIS, 1, [Have Solaris OS])
        ;;
    *freebsd*)
        # Define on FreeBSD to enable all library features
        CFLAGS="-D__BSD_VISIBLE $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        ;;
    *darwin*)
        # Define on Darwin to enable all library features
        CFLAGS="-D_DARWIN_C_SOURCE $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_OSX, 1, [Have DarwinOSX OS])
        ;;
    *netbsd*)
        # Define on NetBSD to enable all library features
        CFLAGS="-D_NETBSD_SOURCE $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_NETBSD, 1, [Have NetBSD OS])
        ;;
    *openbsd*)
        # Define on OpenBSD to enable all library features
        CFLAGS="-D_BSD_SOURCE $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        ;;
    *nto-qnx*)
        AC_DEFINE(LIBSHUPPAN_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        ;;
    *aix*)
        AC_DEFINE(LIBSHUPPAN_HAVE_AIX, 1, [Have AIX OS])
        ;;
    *hpux*)
        # Define on HP-UX to enable all library features
        CFLAGS="-D_POSIX_C_SOURCE=200112L"
        AC_DEFINE(LIBSHUPPAN_HAVE_HPUX, 1, [Have HPUX OS])
        ;;
    *mingw32*)
        AC_DEFINE(LIBSHUPPAN_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE(LIBSHUPPAN_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        shuppan_on_mingw32="yes"
        shuppan_install_man="no"
        ;;
    *cygwin*)
        # Define on Cygwin to enable all library features
        CFLAGS="-D_GNU_SOURCE $CFLAGS"
        AC_DEFINE(LIBSHUPPAN_HAVE_CYGWIN, 1, [Have Cygwin])
        ;;
    *)
        AC_MSG_ERROR([unsupported system: ${host_os}.])
        ;;
esac

AM_CONDITIONAL(HOST_ANDROID, test "x$libshuppan_host_android" = "xyes")

AM_CONDITIONAL(ENABLE_PYTHON, test "x$enable_python" = "xyes")
if test "x$enable_python" = "xyes"; then
	SWIG_PYTHON
	AM_PATH_PYTHON
	CPPFLAGS="-I../include -I/usr/include/python$PYTHON_VERSION $CPPFLAGS"
fi

# Other libraries

AC_CHECK_LIB(uuid, uuid_generate, [
															 if test "x$enable_embedded" = "xyes"; then
																 LIBS="-Wl,-Bstatic -Wl,-luuid -Wl,-Bdynamic $LIBS"
															 else 
																 LIBS="-luuid $LIBS"
															 fi
															 ],
															 [AC_MSG_ERROR([cannot link with -luuid, install libuuid.])]
															 )

AC_CHECK_LIB(zmq, zmq_init, [LIBS="-lzmq $LIBS"],
															 [AC_MSG_ERROR([cannot link with -lzmq, install libzmq.])]
															 )

AC_CHECK_LIB(czmq, zctx_test, [
															 if test "x$enable_embedded" = "xyes"; then
																 LIBS="-Wl,-Bstatic -Wl,-lczmq -Wl,-Bdynamic $LIBS"
															 else 
																 LIBS="-lczmq $LIBS"
															 fi
															 ],
															 [AC_MSG_ERROR([cannot link with -lczmq, install libczmq.])]
															 )

AC_CHECK_LIB(crypto, SHA1_Init, [
															 if test "x$enable_embedded" = "xyes"; then
																 LIBS="-Wl,-Bstatic -Wl,-lcrypto -Wl,-Bdynamic $LIBS"
															 else 
																 LIBS="-lcrypto $LIBS"
															 fi
															 ],
															 [AC_MSG_ERROR([cannot link with -lcrypto, install libcrypto.])]
															 )

AC_CHECK_LIB(fmq, fmq_server_new, [
															 if test "x$enable_embedded" = "xyes"; then
																 LIBS="-Wl,-Bstatic -Wl,-lfmq -Wl,-Bdynamic $LIBS"
															 else 
																 LIBS="-lfmq $LIBS"
															 fi
															 ],
															 [AC_MSG_ERROR([cannot link with -lfmq, install libfmq.])]
															 )

AC_CHECK_LIB(zre, zre_msg_test, [
															 if test "x$enable_embedded" = "xyes"; then
																 LIBS="-Wl,-Bstatic -Wl,-lzre -Wl,-Bdynamic $LIBS"
															 else 
																 LIBS="-lzre $LIBS"
															 fi
															 ],
															 [AC_MSG_ERROR([cannot link with -lzre, install libzre.])]
															 )
# Checks for header files.
AC_HEADER_STDC
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE


# These options are GNU compiler specific.
if test "x$GCC" = "xyes"; then
    CFLAGS="-fPIC -Wno-write-strings -Werror -Wall -Wno-unused ${CFLAGS}"
		LDFLAGS="-fPIC ${LDFLAGS}"
fi
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

# Checks for library functions.
AC_TYPE_SIGNAL

AC_OUTPUT(Makefile src/Makefile src/libshuppan.pc python/Makefile)
